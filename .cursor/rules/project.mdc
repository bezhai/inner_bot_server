---
description: Inner Bot Server - Feishu Bot Microservice Architecture
globs: **/*.{ts,js,py,tsx,jsx,yml,yaml,json,md}
alwaysApply: true
---
# Inner Bot Server Project Rules

## Project Overview

This is an event-driven microservice architecture project for a Feishu (Lark) bot system with the following components:

- main-server: Node.js + TypeScript main server (port 3000)
- ai-service: Python + FastAPI AI service (port 8000) 
- logstash: Log processing service
- PostgreSQL, MongoDB, Redis, Elasticsearch for data storage

## Technical Architecture
- Redis as event bus for cross-service communication
- Support for both Node.js and Python services
- Docker containerization with docker-compose.yml
- Development in TypeScript/JavaScript and Python
- Event-driven architecture with Redis pub/sub
- LangGraph integration for AI workflows
- Prompt management system with PostgreSQL backend

## Development Guidelines

### Configuration Management
#### Python (ai-service)
- Use `pydantic_settings` for configuration management
- All configurations defined in `ai-service/app/config/config.py`
- Config items: lowercase with underscores (e.g., `redis_host`)
- Env vars: uppercase with underscores (e.g., `REDIS_HOST`)
- Sensitive info must use env vars
- Provide `.env.example` as template

#### Node.js (main-server)
- Use environment variables for configuration
- Config files in `main-server/src/types/` and `main-server/src/utils/`
- Use `.env` file for local development
- Provide `.env.example` as template

### Command Usage Rules
1. Docker Commands
   - Use `docker compose` instead of `docker-compose`
   - Example: `docker compose up` instead of `docker-compose up`
   - Use `make` commands for common operations:
     - `make start` - Start all services
     - `make start-dev` - Start in development mode
     - `make down` - Stop all services
     - `make restart-service` - Restart specific service
     - `make deploy` - Production deployment

2. Python Package Management (ai-service)
   - **NEVER directly edit pyproject.toml** - use uv commands only
   - Use `uv` for package management (see `ai-service/pyproject.toml`)
   - Example: `cd ai-service && uv add package-name` (to add)
   - Example: `cd ai-service && uv remove package-name` (to remove)
   - Example: `cd ai-service && uv sync` (to sync dependencies)
   - All dependencies managed in `pyproject.toml` but modified via uv commands

3. Node.js Package Management
   - Use `npm` for main-server
   - Example: `cd main-server && npm install package-name`
   - Use `npm uninstall package-name` to remove dependencies
   - Never manually edit package.json - use npm commands only

### Event System Usage Guidelines
1. Event Naming Convention
   - Use lowercase letters with dot separation
   - Format: `domain.action` or `domain.subdomain.action`
   - Examples: `user.created`, `ai.request`, `data.update`, `lark.message.received`

2. Event Handling Guidelines
   - Broadcast mode: For events that don't require responses
   - Request-response mode: For events that need to wait for processing results
   - All event handlers must be asynchronous
   - Must handle exceptions
   - Event system based on Redis pub/sub in `main-server/src/events/`

3. Timeout Handling
   - Default timeout: 30 seconds
   - Long-running tasks need appropriate timeout settings
   - Timeout handling must return error information

4. AI Service Integration
   - LangGraph workflows in `ai-service/app/services/chat/langgraph/`
   - Tool registry in `ai-service/app/tools/`
   - Memory management with Qdrant vector database

### Code Standards
1. TypeScript/JavaScript (main-server)
   - Use ESLint for code linting (configured in respective directories)
   - Use Prettier for code formatting
   - Follow TypeScript strict mode
   - Use async/await for asynchronous operations
   - Error handling with try-catch blocks

2. Python (ai-service)
   - Use Black for code formatting (configured in pyproject.toml)
   - Use isort for import sorting
   - Follow PEP 8 guidelines
   - Use async/await for asynchronous operations
   - Type hints required for all functions
   - Use Pydantic for data validation

## Documentation Standards
1. Code Comments
   - All public APIs must have JSDoc/Python docstrings
   - Complex logic must have detailed comments
   - Use English for comments
   - Include type information in docstrings

2. Project Documentation
   - README must include project description and startup steps
   - API documentation must be kept up to date
   - Architecture changes must update relevant documentation
   - Document new features in `/docs/` directory
   - Keep deployment guides updated

3. Database Documentation
   - Document schema changes in migration files
   - Include ER diagrams for complex relationships
   - Document indexes and performance considerations

## Version Control
1. Commit Standards
   - Use semantic commit messages
   - Format: `type(scope): message`
   - Types: feat, fix, docs, style, refactor, test, chore
   - Use Chinese for commit messages (as seen in recent commits)
   - Include ticket/issue numbers when applicable

2. Branch Management
   - Main branch: `master`
   - Feature branches: `feature/description`
   - Bug fix branches: `fix/description`
   - Use pull requests for all changes

3. Recent Project Changes
   - Added prompt management system with PostgreSQL backend
   - Refactored Bangumi agent to use database prompts
   - Updated AI service to use AsyncSessionLocal for database sessions
   - Fixed MessageContext initialization parameter passing

## Key Directories and Files
- `main-server/src/services/message-processing/rules/` - Message processing rules
- `ai-service/app/services/chat/langgraph/` - LangGraph AI workflows
- `ai-service/app/tools/` - AI tools and utilities
- `docs/` - Project documentation
- `scripts/` - Deployment and utility scripts
- `logstash/` - Log processing configuration

## Environment Setup
1. Copy `.env.example` to `.env` and configure
2. Run `make start-dev` for development
3. Main server API at http://localhost:3000
4. AI service API at http://localhost:8000
