---
description: 
globs: 
alwaysApply: true
---
# Inner Bot Server Project Rules

## Project Overview
This is an event-driven microservice architecture project with the following components:
- main-server: Main server
- ai-service: AI service
- logstash: Log processing service

## Technical Architecture
- Redis as event bus for cross-service communication
- Support for both Node.js and Python services
- Docker containerization
- Development in TypeScript/JavaScript and Python

## Development Guidelines

### Command Usage Rules
1. Docker Commands
   - Use `docker compose` instead of `docker-compose`
   - Example: `docker compose up` instead of `docker-compose up`

2. Python Package Management
   - All pip commands must be executed in the `main-server` directory
   - Example: `cd main-server && pip install -r requirements.txt`

### Event System Usage Guidelines
1. Event Naming Convention
   - Use lowercase letters with dot separation
   - Format: `domain.action` or `domain.subdomain.action`
   - Examples: `user.created`, `ai.request`, `data.update`

2. Event Handling Guidelines
   - Broadcast mode: For events that don't require responses
   - Request-response mode: For events that need to wait for processing results
   - All event handlers must be asynchronous
   - Must handle exceptions

3. Timeout Handling
   - Default timeout: 30 seconds
   - Long-running tasks need appropriate timeout settings
   - Timeout handling must return error information

### Code Standards
1. TypeScript/JavaScript
   - Use ESLint for code linting
   - Use Prettier for code formatting
   - Follow TypeScript strict mode

2. Python
   - Use Black for code formatting
   - Use isort for import sorting
   - Follow PEP 8 guidelines

## Documentation Standards
1. Code Comments
   - All public APIs must have JSDoc/Python docstrings
   - Complex logic must have detailed comments
   - Use English for comments

2. Project Documentation
   - README must include project description and startup steps
   - API documentation must be kept up to date
   - Architecture changes must update relevant documentation

## Version Control
1. Commit Standards
   - Use semantic commit messages
   - Format: `type(scope): message`
   - Types: feat, fix, docs, style, refactor, test, chore
